{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const request = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Get';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      'Content-type': 'application/json'\n    };\n    setLoading(true);\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url} status:${response.status}`);\n      }\n      const data = await response.json();\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clerError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    error,\n    clerError,\n    request\n  };\n};\n_s(useHttp, \"vV62ew9apPGlySnmJqmuJkFcRgk=\");","map":{"version":3,"names":["useState","useCallback","useHttp","_s","loading","setLoading","error","setError","request","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","clerError"],"sources":["C:/Users/Илья/Desktop/marvel_starter/src/hooks/http.hooks.js"],"sourcesContent":["import { useState,useCallback } from \"react\";\r\n\r\nexport const useHttp=()=>{\r\n    const [loading,setLoading]=useState(true);\r\n    const [error,setError]=useState(false);\r\n\r\n    const request =useCallback(async(url,method='Get',body=null,headers={'Content-type':'application/json'})=>{\r\n        setLoading(true);\r\n        try{\r\n            const response = await fetch(url,{method,body,headers});\r\n            if(!response.ok){\r\n                throw new Error(`Could not fetch ${url} status:${response.status}`)\r\n            }\r\n            const data = await response.json();\r\n            setLoading(false)\r\n            return data\r\n        }catch(e){\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    },[])\r\n    const clerError = useCallback(()=>setError(null), [])\r\n    return {loading,error,clerError,request}\r\n}"],"mappings":";AAAA,SAASA,QAAQ,EAACC,WAAW,QAAQ,OAAO;AAE5C,OAAO,MAAMC,OAAO,GAACA,CAAA,KAAI;EAAAC,EAAA;EACrB,MAAM,CAACC,OAAO,EAACC,UAAU,CAAC,GAACL,QAAQ,CAAC,IAAI,CAAC;EACzC,MAAM,CAACM,KAAK,EAACC,QAAQ,CAAC,GAACP,QAAQ,CAAC,KAAK,CAAC;EAEtC,MAAMQ,OAAO,GAAEP,WAAW,CAAC,gBAAMQ,GAAG,EAAsE;IAAA,IAArEC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,KAAK;IAAA,IAACG,IAAI,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,IAAI;IAAA,IAACI,OAAO,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC;MAAC,cAAc,EAAC;IAAkB,CAAC;IACnGN,UAAU,CAAC,IAAI,CAAC;IAChB,IAAG;MACC,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAC;QAACC,MAAM;QAACI,IAAI;QAACC;MAAO,CAAC,CAAC;MACvD,IAAG,CAACC,QAAQ,CAACE,EAAE,EAAC;QACZ,MAAM,IAAIC,KAAK,CAAE,mBAAkBV,GAAI,WAAUO,QAAQ,CAACI,MAAO,EAAC,CAAC;MACvE;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClCjB,UAAU,CAAC,KAAK,CAAC;MACjB,OAAOgB,IAAI;IACf,CAAC,QAAME,CAAC,EAAC;MACLlB,UAAU,CAAC,KAAK,CAAC;MACjBE,QAAQ,CAACgB,CAAC,CAACC,OAAO,CAAC;MACnB,MAAMD,CAAC;IACX;EACJ,CAAC,EAAC,EAAE,CAAC;EACL,MAAME,SAAS,GAAGxB,WAAW,CAAC,MAAIM,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;EACrD,OAAO;IAACH,OAAO;IAACE,KAAK;IAACmB,SAAS;IAACjB;EAAO,CAAC;AAC5C,CAAC;AAAAL,EAAA,CAtBYD,OAAO"},"metadata":{},"sourceType":"module"}